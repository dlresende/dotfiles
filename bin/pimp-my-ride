#!/usr/bin/env bash

[[ -z "$DEBUG" ]] || set -x

# set -e # bail out early if any command fails
set -u # fail if we hit unset variables
set -o pipefail # fail if any component of any pipe fails

if ! grep -e '^Logged in' <(lpass status) &>/dev/null
then
  read -p 'LastPass username: ' -r
  lpass login --trust "$REPLY" && lpass sync
fi

# shellcheck disable=SC1090
lpass show --notes dotfilesrc > "$HOME/.dotfilesrc" && source "$HOME/.dotfilesrc"

# https://github.com/Homebrew/homebrew-cask/issues/42142
export HOMEBREW_NO_ENV_FILTERING=1

main() {
  configure_ruby
  install_stuff
  check_rbenv
  configure_vim
  configure_tmux
  install_oh_my_zsh
  configure_go_workspace
  configure_git
  load_github_key
  configure_ngrok
}

configure_ruby() {
  rbenv install -s "$(cat ~/.rbenv/version)"

  mkdir -p "$HOME/.gem"
  lpass show --notes gem_credentials > "$HOME/.gem/credentials"
  chmod 0600 "$HOME/.gem/credentials"
}

check_rbenv() {
  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
}

update_homebrew() {
  if command -v 'brew' > /dev/null;
  then
    brew update -v
  fi
}

install_homebrew() {
  if ! command -v 'brew' > /dev/null;
  then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_stuff() {
  update_homebrew || install_homebrew

  brew bundle --global

  npm i -g bash-language-server
}

checkout_projects() {
  mkdir -p "$HOME/Projects"

  ( cd "$HOME" || exit 1
    mr update
  )
}

configure_vim() {
  curl -s https://vimfiles.diegolemos.net/install | bash
}

configure_tmux() {
  TMUX_PLUGIN_MANAGER_PATH="$HOME/.tmux/plugins"

  echo "Updating tmux plugins..."
  if [[ ! -d "$TMUX_PLUGIN_MANAGER_PATH/tpm" ]] ; then
    mkdir -p "$TMUX_PLUGIN_MANAGER_PATH"
    git clone https://github.com/tmux-plugins/tpm "$TMUX_PLUGIN_MANAGER_PATH/tpm"
    "$TMUX_PLUGIN_MANAGER_PATH"/tpm/bin/install_plugins
  else
    ( cd "$TMUX_PLUGIN_MANAGER_PATH/tpm" && git pull )
    "$TMUX_PLUGIN_MANAGER_PATH"/tpm/bin/update_plugins all
  fi
}

install_oh_my_zsh() {
  # ZSH='' sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/upgrade.sh)"
}

configure_go_workspace() {
  if [[ -L "$HOME"/go/src && -d "$HOME"/go/src ]]
  then
    echo "Go workspace already configured. Moving on."
  fi

  mv "$HOME"/go/src/* "$HOME"/Projects
  rm -fr "$HOME"/go/src
  ln -s "$HOME"/Projects "$HOME"/go/src
}

configure_git() {
  git config --global core.excludesfile ~/.gitignore_global
  git config --global pull.rebase false
}

ssh_add() {
  local key="${1:?}"
  local key_file
  key_file="$(mktemp)"
  echo "$key" > "$key_file"
  chmod 0600 "$key_file"
  ssh-add "$key_file"
}

load_github_key() {
  echo "Loading Github key..."
  ssh_add "$(lpass show --notes Github | yq -r .ssh_key)"
}

load_bitbucket_key() {
  echo "Loading Bitbucket key..."
  ssd_add "$(lpass show --notes Business/Atlassian | yq -r .bitbucket.private_key)"
}

configure_ngrok() {
  lpass show --notes 'ngrok.com' > "$HOME/.ngrok2/ngrok.yml"
}

main
