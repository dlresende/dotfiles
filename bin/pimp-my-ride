#!/usr/bin/env bash

: "${SKIP_SECRETS:=}"
: "${DEBUG:=}"

set -u # fail if we hit unset variables
set -o pipefail # fail if any component of any pipe fails

[[ -z "$DEBUG" ]] || set -x

main() {
  switch_to_bash
  install_stuff
  configure_ruby && check_rbenv
  configure_vim
  configure_tmux
  configure_git

  if [ -z "$SKIP_SECRETS" ]
  then
    configure_secrets
    checkout_projects
  fi
}

switch_to_bash() {
  [ "$SHELL" = '/bin/bash' ] || chsh -s /bin/bash
}

install_stuff() {
  local noise_level

  if [ -z "$DEBUG" ]
  then
    noise_level='--quiet'
  else
    noise_level='--debug'
  fi

  if command -v 'brew' &> /dev/null
  then
    brew update "$noise_level"
  else
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  brew bundle --global "$noise_level"

  npm i -g bash-language-server &&
    npm update -g
}

configure_ruby() {
  rbenv install --list | grep 2.7 > ~/.rbenv/version
  rbenv install -s "$(cat ~/.rbenv/version)"
}

check_rbenv() {
  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash
}

configure_vim() {
  curl -fsSL https://vimfiles.diegolemos.net/install | bash
}

configure_tmux() {
  TMUX_PLUGIN_MANAGER_PATH="$HOME/.tmux/plugins"

  echo "Updating tmux plugins..."
  if [[ ! -d "$TMUX_PLUGIN_MANAGER_PATH/tpm" ]] ; then
    mkdir -p "$TMUX_PLUGIN_MANAGER_PATH"
    git clone https://github.com/tmux-plugins/tpm "$TMUX_PLUGIN_MANAGER_PATH/tpm"
    "$TMUX_PLUGIN_MANAGER_PATH"/tpm/bin/install_plugins
  else
    ( cd "$TMUX_PLUGIN_MANAGER_PATH/tpm" && git pull )
    "$TMUX_PLUGIN_MANAGER_PATH"/tpm/bin/update_plugins all
  fi
}

configure_go_workspace() {
  if [[ -L "$HOME"/go/src && -d "$HOME"/go/src ]]
  then
    echo "Go workspace already configured. Moving on."
    return
  fi

  mv "$HOME"/go/src/* "$HOME"/Projects
  rm -fr "$HOME"/go/src
  ln -s "$HOME"/Projects "$HOME"/go/src
}

configure_git() {
  git config --global core.excludesfile ~/.gitignore_global
  git config --global pull.rebase false
}

ssh_add() {
  local key="${1:?}"
  local key_file
  key_file="$(mktemp)"
  echo "$key" > "$key_file"
  chmod 0600 "$key_file"
  ssh-add "$key_file"
}

load_github_key() {
  local msg
  msg="$(ssh -T git@github.com 2>&1)"

  if [[ "$msg" =~ .*"You've successfully authenticated".* ]]; then
    return
  fi

  echo "Loading Github key..."
  ssh_add "$(lpass show --notes Github | yq -r .ssh_key)"
}

load_bitbucket_key() {
  local msg
  msg="$(ssh -T git@bitbucket.org -o StrictHostKeyChecking=no 2>&1)"

  if [[ "$msg" =~ .*'authenticated via ssh key'.* ]]; then
    return
  fi

  echo "Loading Bitbucket key..."
  ssh_add "$(lpass show --notes Business/Atlassian | yq -r .bitbucket.private_key)"
}

checkout_projects() {
  mkdir -p "$HOME/Projects"

  local noise_level

  if [ -z "$DEBUG" ]
  then
    noise_level='--quiet'
  else
    noise_level='--verbose'
  fi

  ( cd "$HOME" || exit 1
    mr "$noise_level" update
  )
}

get_secret() {
  local key="${1:?}"
  local destination="${2:?}"

  log_into_lpass

  mkdir -p "$(dirname ${destination})"
  lpass show --notes "$key" > "$destination"
  chmod 0600 "$destination"
}

log_into_lpass() {
  if ! grep -e '^Logged in' <(lpass status) &>/dev/null
  then
    read -p 'LastPass username: ' -r
    ( lpass login --trust "$REPLY" && lpass sync ) || exit 1
  fi
}

configure_secrets() {
  load_github_key
  load_bitbucket_key

  get_secret 'dotfilesrc' "${HOME}/.dotfilesrc"
  get_secret 'ngrok.com' "$HOME/.ngrok2/ngrok.yml"
  get_secret 'gem_credentials' "$HOME/.gem/credentials"
}

main
